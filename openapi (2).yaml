openapi: 3.0.3
info:
  title: Potato (Kartoshka) RestAPI
  version: 0.0.1
  description: |-
    This is the RestAPI for the project SHIFT Intensive - Russian e-wallet "Potato" or "Kartoshka"
servers:
  - url: https://example.com/potato/api
tags:
  - name: user
    description: Information about users
  - name: session
  - name: wallet
  - name: transfer
paths:
  /users:
    post:
      tags:
        - user
      summary: Add a new user to the wallet
      security:
        - potatoOAuth2:
          - addUser
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAdd'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'          
        '401':
          description: Invalid input
        '403':
          description: Access is denied
        '422':
          description: Validation exception
          
  /users/{userID}:
    patch:
      tags:
        - user
      summary: Update infrormation about user
      security:
        - potatoOAuth2:
          - updateUser
      operationId: updateUser
      parameters:
        - name: userID
          in: path
          description: User's ID, data which is needed to update
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Incorrect request
        '401':
          description: Unauthorized user
        '403':
          description: Access denied
        '404':
          description: User not found
        '422':
          description: Validation error
    get:
      tags:
        - user
      summary: Get information about user by ID
      security:
        - potatoOAuth2:
          - readUser
      operationId: getUserByID
      parameters:
        - name: userID
          in: path
          description: User's ID which is need to return
          required: true
          schema:
            type: integer
            format: int64
            example: 123
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Incorrect request
        '401':
          description: Unauthorized user
        '403':
          description: Access denied          
        '404':
          description: User not found
          
  /users/findByEmail:
    get:
      tags:
        - user
      summary: .
      security:
        - potatoOAuth2:
          - readUser      
      operationId: getUserInfoByEmail
      parameters:
        - name: userEmail
          in: query
          description: Email пользователя, которого необходимо вернуть.
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            example: example@email.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /users/findByPhoneNumber:
    get:
      tags:
        - user
      summary: Получение данных о пользователе по PhoneNumber.
      security:
        - potatoOAuth2:
          - readUser      
      operationId: getUserInfoByPhoneNumber
      parameters:
        - name: phoneNumber
          in: query
          description: PhoneNumber пользователя, которого необходимо вернуть.
          required: true
          schema:
            type: string
            pattern: '^7\d{10}$'
            example: 79999999999
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /users/{userId}/wallet/hesoyam:
    post:
      tags:
        - wallet
      summary: Попытка получить дополнительные 10 д.е на счет
      security:
        - potatoOAuth2:
          - readUser
          - readWallet
          - hesoyamWallet
      operationId: userWalletHesoyam
      parameters:
        - name: userId
          in: path
          description: Id пользователя, для которого необходимо запустить рулетку.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletRoulette'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /users/{userId}/wallet:
    get:
      tags:
        - wallet
      summary: Получение данных о кошельке пользователя по userId.
      security:
        - potatoOAuth2:
          - readUser
          - readWallet      
      operationId: getUserWalletInfo
      parameters:
        - name: userId
          in: path
          description: Id пользователя, информацию о кошельке которого надо вернуть.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wallet'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /invoices:
    post:
      tags:
       - invoice
      summary: Создание нового счета на оплату.
      security:
        - potatoOAuth2:
          - createInvoice    
      operationId: createInvoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCreate'
      responses:
        '200': 
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceInfo'  
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.                
  /invoices/canceledBySender:
    patch:
      tags:
        - invoice
      summary: Отмена существующего счета отправителем.
      security:
        - potatoOAuth2:
          - updateInvoice      
      operationId: invoiceCanceledBySender
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCancel'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceCanceled'    
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Данные не найдены.
        '422':
          description: Ошибка валидации.  
  /invoices/paidByRecipient:
    patch:
      tags:
        - invoice
      summary: Оплата существующего счета получателем.
      security:
        - potatoOAuth2:
          - updateInvoice        
      operationId: invoicePaidByRecipient
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoicePay"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoicePaid'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Данные не найдены.
        '422':
          description: Ошибка валидации.  
  /invoices/{invoiceId}:
    get:
      tags:
        - invoice
      summary: Получение информации о существующем счете.
      security:
        - potatoOAuth2:
          - readInvoice        
      operationId: getInvoiceInfo
      parameters:
        - name: invoiceId
          in: path
          description: Id счета, данные которого необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            example: 1012312
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Счет не найден.
  /invoices/createdByUser/{userId}:
    get:
      tags:
        - invoice
      summary: Получение списка счетов, которые выставил пользователь.
      security:
        - potatoOAuth2:
          - readUser
          - readInvoice      
      operationId: getInvoiceCreatedByUser
      parameters:
        - name: userId
          in: path
          description: Id пользователя, выставленные счета которого необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/InvoicesByUser'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /invoices/issuedToUser/{userId}:
    get:
      tags:
        - invoice
      summary: Получение списка счетов, которые выставлены пользователю.
      security:
        - potatoOAuth2:
          - readUser
          - readInvoice      
      operationId: getInvoiceIssuedToUser
      parameters:
        - name: status
          in: query
          description: Статус счета.
          required: false
          schema:
            type: string
            enum: ['notPaid', 'paid', 'canceled']
            nullable: false
        - name: start
          in: query
          description: Дата выставления с.
          required: false
          schema:
            type: string
            format: date
            nullable: false
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: 1970-01-01
        - name: end
          in: query
          description: Дата выставления по.
          required: false
          schema:
            type: string
            format: date
            nullable: false
            pattern: '^\d{4}-\d{2}-\d{2}$'
            example: 1970-01-01        
        - name: userId
          in: path
          description: Id пользователя, выставленные счета которому необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/InvoicesToUser'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /invoices/issuedToUser/{userId}/{invoiceStatus}/oldest:
    get:
      tags:
        - invoice
      summary: Получение наиболее давнего счета с запрашиваемым статусом.
      security:
        - potatoOAuth2:
          - readUser
          - readInvoice      
      operationId: getInvoiceIssuedToUserWithStatus
      parameters:
        - name: userId
          in: path
          description: Id пользователя, счет которого необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            nullable: false            
            example: 10
        - name: invoiceStatus
          in: path
          description: Статус необходимого счета.
          required: true
          schema:
            type: string
            enum: ['notPaid', 'paid', 'canceled']
            nullable: false            
            example: notPaid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/InvoiceInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /invoices/issuedToUser/{userId}/{invoiceStatus}/total:
    get:
      tags:
        - invoice
      summary: Получение общей суммы счетов со статусом InvoiceStatus.
      security:
        - potatoOAuth2:
          - readUser
          - readInvoice      
      operationId: getTotalAmountOfInvoicesIssuedToUserWithStatus
      parameters:
        - name: userId
          in: path
          description: Id пользователя, счета которого необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
        - name: invoiceStatus
          in: path
          description: Статус счетов.
          required: true
          schema:
            type: string
            enum: ['notPaid', 'paid', 'canceled']
            nullable: false            
            example: notPaid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/InvoiceTotal'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
  /transfers/toUser/byPhoneNumber/{phoneNumber}:
    post:
      tags:
        - transfer
      summary: Перевод денег пользователю по номеру телефона.
      security:
        - potatoOAuth2:
          - readUser
          - readSingleTransfer      
      operationId: transferToUserByPhoneNumber;
      parameters:
        - name: phoneNumber
          in: path
          description: Номер телефона пользователя.
          required: true
          schema:
            type: string
            nullable: false
            pattern: '^7\d{10}$'
            example: 79999999999
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/TransferToUserByPhoneNumber'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TransferToUserByPhoneNumberResponse'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь-отправитель или пользователь-получатель не найдены.
        '422':
          description: Ошибка валидации.  
  /transfers/toUser/byID/{resipientID}:
    post:
      tags:
        - transfer
      summary: Перевод денег пользователю по email.
      security:
        - potatoOAuth2:
          - readUser
          - readSingleTransfer      
      operationId: transferToUserByEmail;
      parameters:
        - name: resipientID
          in: path
          description: Email пользователя, которому необходимо перевести деньги.
          required: true
          schema:
            type: integer
            format: int64
            nullable: false
            example: 78214
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/TransferToUserByID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TransferToUserByIDResponse'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь-отправитель или пользователь-получатель не найдены.
        '422':
          description: Ошибка валидации.  
  /transfers/issuedByInvoice/{invoiceId}:
    post:
      tags:
        - transfer
      summary: Оплата счета по invoiceId
      security:
        - potatoOAuth2:
          - readInvoice
          - readSingleTransfer      
      operationId: transferIssudByInvoiceId;
      parameters:
        - name: invoiceId
          in: path
          description: InvoiceId счета, который необходимо оплатить.
          required: true
          schema:
            type: integer
            format: int64
            nullable: false            
            example: 10313213
      requestBody:
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/TransferByInvoice'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TransferByInvoiceResponse'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь-отправитель или счет для оплаты не найдены.
        '422':
          description: Ошибка валидации.  
  /transfers/history/{userId}:
    get:
      tags:
          - transfer
      summary: Получение истории переводов.
      security:
        - potatoOAuth2:
          - readUser
          - readHistoryTransfer            
      operationId: getTransfersInfo
      parameters:
        - name: userId
          in: path
          description: Id пользователя, переводы которого надо получить.
          required: true
          schema:
            type: integer
            format: int64
            nullable: false            
            example: 10
        - name: type
          in: query
          description: Регулирует входящие/исходящие запросы.
          required: false
          schema:
            type: string
            enum: ['incoming', 'outgoing']
        - name: status
          in: query
          description: Регулирует выполненные/не выполенные запросы.
          required: false
          schema:
            type: string
            enum: ['successful', 'failed']
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransferInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Пользователь не найден.
    
  /transfers/{transferId}:
    get:
      tags:
        - transfer
      summary: Получение информации о переводе с помощью transferId
      security:
        - potatoOAuth2:
          - readSingleTransfer 
      operationId: getTransferInfoById
      parameters:
        - name: transferId
          in: path
          description: Id перевода, данные о котором надо получить.
          required: true
          schema:
            type: integer
            format: int64
            nullable: false            
            example: 10313213
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/TransferInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.          
        '404':
          description: Перевод не найден.        
        
        
  /users/{userId}/sessions/create:
    post:
      tags:
        - session
      summary: Создание новой сессии с помощью PhoneNumber.
      security:
        - potatoOAuth2:
          - createSession
          - readUser
      operationId: createSession
      parameters:
        - name: userId
          in: path
          description: Id пользователя, для которого необходимо создать сессию.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          description: Некорректный запрос.  
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.
        '404':
          description: Пользователь не найден запрос.      
        '422':
          description: Ошибка валидации.
  
  /users/{userId}/sessions/active:
    get:
      tags:
        - session
      summary: Получение данных об активных сессииях.
      security:
        - potatoOAuth2:
          - readSession
          - readUser      
      operationId: getActiveSessionsInfo
      parameters:
        - name: userId
          in: path
          description: Id пользователя, сессии которого необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionActive'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.
        '404':
          description: Пользователь не найден.
        '422':
          description: Ошибка валидации.
  /users/{userId}/sessions/{sessionId}:
    get:
      tags:
        - session
      summary: Получение данных о сессии.
      security:
        - potatoOAuth2:
          - readSession
          - readUser      
      operationId: getSessionInfo
      parameters:
        - name: userId
          in: path
          description: Id пользователя, сессию которого необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
        - name: sessionId
          in: path
          description: Id сессии, информацию о которой необходимо получить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionInfo'
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.        
        '404':
          description: Пользователь или сессия не найдены.
        '422':
          description: Ошибка валидации.
  /users/{userId}/sessions/{sessionId}/logout:
    post:
      tags:
        - session
      summary: Выход из сессии.
      security:
        - potatoOAuth2:
          - logoutSession
          - readUser      
      operationId: logoutFromSession
      parameters:
        - name: userId
          in: path
          description: Id пользователя, сессию которого надо обнулить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
        - name: sessionId
          in: path
          description: Id сессии, котурба надо занулить.
          required: true
          schema:
            type: integer
            format: int64
            example: 10
      responses:
        '200':
          description: OK
        '400':
          description: Некорректный запрос.
        '401':
          description: Не авторизованный клиент.
        '403':
          description: Доступ запрещен.
        '404':
          description: Пользователь или сессия не найдены.
        '422':
          description: Ошибка валидации.
        
        
          
          
components:
  schemas:
    UserAdd:
      type: object
      properties:
        firstName:
          type: string
          nullable: false
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иван
        lastName:
          type: string
          nullable: false
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иванов
        middleName:
          type: string
          nullable: true
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иванович
        phoneNumber:
          type: string
          nullable: false
          pattern: '^7\d{10}$'
          example: 71234567890
        email:
          type: string
          nullable: false
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._%+-]+\.[a-zA-Z]{2,}$'
          example: example@email.com
        birthDate:
          type: string
          format: date
          nullable: false
          pattern: '^\d{4}-\d{2}\d{2}$'
          example: 2000-01-01
        password:
          type: string
          format: password
          nullable: false
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!?])[a-zA-Z0-9!?]{8,64}$'
          minLength: 8
          maxLength: 64
          example: PassWord123?
      required:
        - lastName
        - firstName
        - phoneNumber
        - birthDate
        - password
        - email
      additionalProperties: false
      
    UserInfo:
      type: object
      properties:
        userID:
          type: integer
          format: int64
          nullable: false
          example: 1
        firstName:
          type: string
          nullable: false
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иван
        lastName:
          type: string
          nullable: false
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иванов
        middleName:
          type: string
          nullable: true
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иванович
        phoneNumber:
          type: string
          nullable: false
          pattern: '^7\d{10}$'
          example: 71234567890
        email:
          type: string
          nullable: false
          pattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9._%+-]+\.[a-zA-Z]{2,}$'
          example: example@email.com
        birthDate:
          type: string
          format: date
          nullable: false
          pattern: '^\d{4}-\d{2}\d{2}$'
          example: 2000-01-01
        password:
          type: string
          format: password
          nullable: false
          pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!?])[a-zA-Z0-9!?]{8,64}$'
          minLength: 8
          maxLength: 64
          example: PassWord123?
      required:
        - userID
        - lastName
        - firstName
        - phoneNumber
        - birthDate
        - password
        - email
        
    UserPatch:
      type: object
      properties:
        firstName:
          type: string
          nullable: false
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иван
        lastName:
          type: string
          nullable: false
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иванов
        middleName:
          type: string
          nullable: true
          pattern: '^[А-ЯЁ][а-яё]{1,50}$'
          maxLength: 50
          example: Иванович
        birthDate:
          type: string
          format: date
          nullable: false
          pattern: '^\d{4}-\d{2}\d{2}$'
          example: 2000-01-01
      required:
        - lastName
        - firstName
        - birthDate
      additionalProperties: false
    
    
    SessionCreate:
      type: object
      properties:
        userID:
          type: integer
          format: int64
          nullable: false
          example: 128736
        timeSession:
          type: string
          format: time
          pattern: '^\d{2}:\d{2}:\d{2}'
          nullable: false
          default: 24:00:00
          example: 12:55:01
      required:
        - userID
        - timeSession
        
    SessionInfo:
      type: object
      properties:
        userID:
          type: integer
          format: int64
          nullable: false
          example: 128736
        timeSession:
          type: string
          format: time
          pattern: '^\d{2}:\d{2}:\d{2}'
          nullable: false
          example: 12:55:01
        timeSessionLeft:  
          type: string
          format: time
          pattern: '^\d{2}:\d{2}:\d{2}'
          nullable: false
          example: 12:55:01
      required:
        - userID
        - timeSessionLeft
        - timeSession
        
    SessionActive:
      type: object
      properties:
        session:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                nullable: false
                example: 128736
              userID:
                type: integer
                format: int64
                nullable: false
                example: 128736 
              timeSessionLeft:  
                type: string
                format: time
                pattern: '^\d{2}:\d{2}:\d{2}'
                nullable: false
                example: 12:55:01
      additionalProperties: false
      required:
        - session
      
    SessionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          nullable: false
          example: 128736
        timeSessionLeft:  
          type: string
          format: time
          pattern: '^\d{2}:\d{2}:\d{2}'
          nullable: false
          example: 12:55:01 
        accessToken:
          type: string
          nullable: false
          example: kasdks7d8asdbGS7sh7dsbsSGjsd8lkasd
        updateToken:
          type: string
          nullable: false
          example: kasdks7d8asdbGS7sh7dsbsSGjsd8lkasd
      additionalProperties: false
      required:
        - id
        - timeSessionLeft
        - accessToken
        - updateToken
                
        
    Wallet:
      type: object
      properties:
        walletID:
          type: integer
          format: int64
          nullable: false
          example: 1234567890
        userID:
          type: integer
          format: int64
          nullable: false
          example: 1
        balance:
          type: integer
          nullable: false
          minimum: 0
          example: 10
      required:
        - walletID
        - userID
        - balance
        
    WalletRoulette:
      type: object
      properties:
        userID:
          type: integer
          format: int64
          nullable: false
          example: 1
        walletID:
          type: integer
          format: int64
          nullable: false
          example: 1234567890  
        result:
          type: string
          enum: ['win', 'lose']
          nullable: false
        prize:
          type: integer
          enum: [0, 10]
          nullable: false
        balance:
          type: integer
          nullable: false
          minimum: 0
          example: 10
      required:
        - walletID
        - userID
        - balance
        - result
        - prize
        
    InvoiceCreate:
      type: object
      properties:
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          minimum: 1
          nullable: false
          example: 100
        comment:
          type: string
          maxLength: 250
          nullable: true
          example: Долг с процентами
      required:
        - senderID
        - recipientID
        - amount
        
    InvoiceInfo:
      type: object
      properties:
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          minimum: 1
          nullable: false
          example: 100
        comment:
          type: string
          maxLength: 250
          nullable: true
          example: Долг с процентами
        status:
          type: string
          nullable: false
          enum: ['Оплачен', 'Неоплачен', 'Отменен']
        dateTimeInvoicing:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00
        dateTimePay:
          type: string
          format: date-time
          nullable: true
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00  
        dateTimeCancel:
          type: string
          format: date-time
          nullable: true
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00  
      required:
        - senderID
        - recipientID
        - amount
        - invoiceID
        - status
        - dateTimeInvoicing
        
    InvoiceCancel:
      type: object
      properties:
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
      required:
        - invoiceID
        - senderID
        
    InvoicePay:
      type: object
      properties:
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          minimum: 1
          nullable: false
          example: 100  
      required:
        - invoiceID
        - recipientID
        - amount
        
    InvoicePaid:
      type: object
      properties:
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          minimum: 1
          nullable: false
          example: 100
        comment:
          type: string
          maxLength: 250
          nullable: true
          example: Долг с процентами
        status:
          type: string
          nullable: false
          default: Оплачен
        dateTimeInvoicing:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00
        dateTimePay:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00  
      required:
        - senderID
        - recipientID
        - amount
        - invoiceID
        - status
        - dateTimeInvoicing
        - dateTimePay
        
    InvoiceCanceled:
      type: object
      properties:
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          minimum: 1
          nullable: false
          example: 100
        comment:
          type: string
          maxLength: 250
          nullable: true
          example: Долг с процентами
        status:
          type: string
          nullable: false
          default: Отменен
        dateTimeInvoicing:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00
        dateTimeCancel:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00  
      required:
        - senderID
        - recipientID
        - amount
        - invoiceID
        - status
        - dateTimeInvoicing
        - dateTimeCancel  
        
    InvoicesByUser:
      items:
        $ref: '#/components/schemas/InvoiceInfo'
        
    InvoicesToUser:
      items:
        $ref: '#/components/schemas/InvoiceInfo'
        
    InvoiceTotal:
      type: object
      properties:
        userID:
          type: integer
          format: int64
          nullable: true
          example: 123
        status:
          type: string
          nullable: false
          enum: ['Оплачен', 'Неоплачен', 'Отменен']
        total:
          type: integer
          format: int64
          nullable: false
          example: 2618
      required:
        - userID
        - status
        - total
        
    TransferToUserByPhoneNumber:
      type: object
      properties:
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientPhoneNumber:
          type: string
          pattern: '^7\d{10}$'
          example: 71234567890
        amount:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 283
      required:
        - senderID
        - recipientPhoneNumber
        - amount
        
    TransferToUserByPhoneNumberResponse:
      type: object
      properties:
        transferID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientPhoneNumber:
          type: string
          pattern: '^7\d{10}$'
          example: 71234567890
        amount:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 283
        status:
          type: string
          nullable: false
          enum: ['Выполнен', 'Не выполнен']
          default: Выполнен  
        dateTime:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00
      required:
        - transferID
        - senderID
        - recipientPhoneNumber
        - amount
        - dateTime
         - status
        
    TransferToUserByID:
      type: object
      properties:
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientWalletID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          nullable: false
          example: 10263
      required:
        - senderID
        - recipientWalletID
        - amount
        
    TransferToUserByIDResponse:
      type: object
      properties:
        transferID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 283
        status:
          type: string
          nullable: false
          enum: ['Выполнен', 'Не выполнен']
          default: Выполнен
        dateTime:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00
      required:
        - transferID
        - senderID
        - recipientID
        - amount
        - dateTime  
        - status
        
    TransferByInvoice:
      type: object
      properties:
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 812736
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 982163
        amount:
          type: integer
          format: int64
          nullable: false
      required:
        - invoiceID
        - senderID
        - amount
        
    TransferByInvoiceResponse:
      type: object
      properties:
        transferID:
          type: integer
          format: int64
          nullable: false
          example: 123
        invoiceID:
          type: integer
          format: int64
          nullable: false
          example: 123
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 123
        amount:
          type: integer
          format: int64
          nullable: false
          minimum: 1
          example: 283
        status:
          type: string
          nullable: false
          enum: ['Выполнен', 'Не выполнен']
          default: Выполнен
        dateTime:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2000-01-01T00:00:00
      required:
        - transferID
        - senderID
        - invoiceID
        - amount
        - dateTime  
        - status    
          
    TransferInfo:
      type: object
      properties:
        transferID:
          type: integer
          format: int64
          nullable: false
          example: 72539107367
        senderID:
          type: integer
          format: int64
          nullable: false
          example: 6512763512
        recipientID:
          type: integer
          format: int64
          nullable: false
          example: 781263871
        amount:
          type: integer
          format: int64
          minimum: 1
          nullable: false
          example: 1234789
        type:
          type: string
          nullable: false
          enum: ['Оплата услуги/счета', 'Перевод по номеру телефона', 'Перевод по номеру кошелька']
        invoiceID:
          type: integer
          format: int64
          nullable: true
          example: 1289736
        status:
          type: string
          nullable: false
          enum: ['Выполнен', 'Не выполнен']
        dateTime:
          type: string
          format: date-time
          nullable: false
          pattern: '^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}'
          example: 2024-09-27T15:46:02
      required:
        - transferID
        - senderID
        - recipientID
        - amount
        - type
        - status
        - dateTime
          
          
          
  securitySchemes:
    potatoOAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://example.com/oauth/token
          scopes:
            addUser: Добавление пользователя
            readUser: Чтение информации о пользователе
            updateUser: Обновление информации о пользователе
            readWallet: Чтение информации о кошельке
            hesoyamWallet: Рулетка
            createInvoice: Создание счета на оплату
            readInvoice: Чтение информации о счете на оплату
            updateInvoice: Обновление статуса счета на оплату
            createTransfer: Создание денежного перевода
            readTransfer: Чтение информации о денежном переводе
            readHistoryTransfers: Чтение истории денежных переводов
      
          
          
        
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          